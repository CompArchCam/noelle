clang++ -I../../include/threadpool/include -std=c++14 -emit-llvm -O0 -Xclang -disable-O0-optnone -c test.cpp -o test.bc
opt -basicaa -mem2reg -simplifycfg -instcombine -tailcallelim -loop-simplify -lcssa -loop-unswitch -instcombine -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars test.bc -o test.bc
opt -dot-cfg -disable-output test.bc
Writing 'cfg.main.dot'...
llvm-dis test.bc
clang++ -O3 -c -emit-llvm test.bc -o baseline.bc
llvm-dis baseline.bc
clang++ -O3 baseline.bc -o baseline
clang++ "-DDEBUG" -I../../include/threadpool/include -std=c++14 -emit-llvm -O3 -c Parallelizer_utils.cpp -o Parallelizer_utils.bc
llvm-link test.bc Parallelizer_utils.bc -o test_seq.bc
Running DGSimplify to inline calls within SCCs, iteration: 1
DGSimplify at "runOnModule"
DGSimplify:   No remaining call inlining in SCCs
Running DGSimplify to hoist loops to main, iteration: 1
DGSimplify at "runOnModule"
DGSimplify:   No remaining hoists
opt -basicaa -mem2reg -simplifycfg -instcombine -tailcallelim -loop-simplify -lcssa -loop-unswitch -instcombine -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars test_seq.bc -o test_seq.bc
llvm-dis test_seq.bc
clang++ -std=c++14 -pthreads -O3 test_seq.bc -lm -o testseq
clang++ -pthreads -fprofile-instr-generate -lstdc++ test_seq_prof.bc -lm -o test_seq_prof
./test_seq_prof `cat input.txt` 
-831254335, 0, 0, 0, 0, 0, 0, 0
llvm-profdata merge default.profraw -output=output.prof
opt -load ~/CAT/lib/AllocAA.so -load ~/CAT/lib/TalkDown.so -load ~/CAT/lib/PDGAnalysis.so -load ~/CAT/lib/Architecture.so -load ~/CAT/lib/DataFlow.so -load ~/CAT/lib/HotProfiler.so -load ~/CAT/lib/Parallelization.so -load ~/CAT/lib/Heuristics.so -load ~/CAT/lib/ParallelizationTechnique.so -load ~/CAT/lib/DSWP.so -load ~/CAT/lib/DOALL.so -load ~/CAT/lib/HELIX.so -load ~/CAT/lib/Parallelizer.so  -basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa -scalar-evolution -loops -loop-simplify -lcssa -domtree -parallelization  -pgo-test-profile-file=output.prof -block-freq -pgo-instr-use -HotProfiler -heuristics -parallelizer -alloc-aa-verbose=1 -pdg-verbose=1 -noelle-verbose=2 -dswp-force -noelle-min-hot=0 test_seq.bc -o test_dswp_unoptimized.bc
AllocAA at "runOnModule"
HotProfiler: Start
HotProfiler:   Total instructions = 0
HotProfiler: Exit
Parallelization at "runOnModule"
HotProfiler: Start
HotProfiler:   Total instructions = 2147504736
HotProfiler: Exit
AllocAA at "runOnModule"
Parallelization at "runOnModule"
AllocAA at "runOnModule"
HotProfiler: Start
HotProfiler:   Total instructions = 2147504736
HotProfiler: Exit
Parallelizer: Analyzing the module test_seq.bc
Parallelizer: Filter out cold code
Parallelizer:  Loop hotness = 4.237476e-08
Parallelizer:  Loop hotness = 5.472398e-06
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Loop hotness = 6.006972e-07
Parallelizer:  Disable loop "10" as cold code
Parallelizer:  There are 1 loops to parallelize
Parallelizer:    Function "main"
Parallelizer:    Try to parallelize the loop "  %47 = icmp sgt i64 %18, %indvars.iv41"
Parallelizer:  Parallelize all 1 loops, one at a time
Parallelizer: Start
Parallelizer:  Function "main"
Parallelizer:  Try to parallelize the loop "  %47 = icmp sgt i64 %18, %indvars.iv41"
Parallelizer:  In theory, DSWP would be more effective than HELIX
DOALL: Checking if the loop is DOALL
DOALL:   Some post environment value is not reducable
DSWP: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Start
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences:  Initial number of partitions: 8
ParallelizationTechniqueForLoopsWithLoopCarriedDataDependences: Exit
DSWP:  Before partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %.120 = phi i32 [ %111, %109 ], [ %.019, %104 ]
DSWP:       %.019 = phi i32 [ %.120.lcssa, %112 ], [ %45, %26 ]
DSWP:       %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:       %.120.lcssa = phi i32 [ %.120, %105 ]
DSWP:       %111 = sdiv i32 %110, 2
DSWP:   SCC: 1 Internal nodes:
DSWP:       %103 = sdiv i32 %102, 2
DSWP:       %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:       %.017 = phi i32 [ %.118.lcssa, %112 ], [ %42, %26 ]
DSWP:       %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:       %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:   SCC: 2 Internal nodes:
DSWP:       %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:       %95 = sdiv i32 %94, 2
DSWP:       %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:       %.015 = phi i32 [ %.116.lcssa, %112 ], [ %39, %26 ]
DSWP:       %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:   SCC: 3 Internal nodes:
DSWP:       %87 = sdiv i32 %86, 2
DSWP:       %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:       %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:       %.013 = phi i32 [ %.114.lcssa, %112 ], [ %36, %26 ]
DSWP:       %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:   SCC: 4 Internal nodes:
DSWP:       %79 = sdiv i32 %78, 2
DSWP:       %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:       %.011 = phi i32 [ %.112.lcssa, %112 ], [ %33, %26 ]
DSWP:       %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:       %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:   SCC: 5 Internal nodes:
DSWP:       %.110 = phi i32 [ %71, %69 ], [ %.09, %64 ]
DSWP:       %71 = sdiv i32 %70, 2
DSWP:       %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:       %.09 = phi i32 [ %.110.lcssa, %112 ], [ %31, %26 ]
DSWP:       %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:   SCC: 6 Internal nodes:
DSWP:       %.18 = phi i32 [ %63, %61 ], [ %.07, %56 ]
DSWP:       %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:       %63 = sdiv i32 %62, 2
DSWP:       %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:       %.07 = phi i32 [ %.18.lcssa, %112 ], [ %29, %26 ]
DSWP:   SCC: 7 Internal nodes:
DSWP:       %55 = sdiv i32 %54, 2
DSWP:       %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:       %54 = mul nsw i32 %.1, 3
DSWP:       %.1 = phi i32 [ %55, %53 ], [ %.06, %48 ]
DSWP:       %.06 = phi i32 [ %.1.lcssa, %112 ], [ %0, %26 ]
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: Set:  1; 
DSWP:   Set:  1
DSWP:    Children: Set:  0; 
DSWP:    Parents: Set:  2; 
DSWP:   Set:  2
DSWP:    Children: Set:  1; 
DSWP:    Parents: Set:  3; 
DSWP:   Set:  3
DSWP:    Children: Set:  2; 
DSWP:    Parents: Set:  4; 
DSWP:   Set:  4
DSWP:    Children: Set:  3; 
DSWP:    Parents: Set:  5; 
DSWP:   Set:  5
DSWP:    Children: Set:  4; 
DSWP:    Parents: Set:  6; 
DSWP:   Set:  6
DSWP:    Children: Set:  5; 
DSWP:    Parents: Set:  7; 
DSWP:   Set:  7
DSWP:    Children: Set:  6; 
DSWP:    Parents: 
Heuristic:   PCA: Checking: Set:  7 Set:  6 Is possible
Heuristic:   PCA: Checking: Set:  6 Set:  5 Is possible
Heuristic:   PCA: Checking: Set:  5 Set:  4 Is possible
Heuristic:   PCA: Checking: Set:  4 Set:  3 Is possible
Heuristic:   PCA: Checking: Set:  3 Set:  2 Is possible
Heuristic:   PCA: Checking: Set:  2 Set:  1 Is possible
Heuristic:   PCA: Checking: Set:  1 Set:  0 Is possible
Heuristic:   PCA: No candidates
DSWP:  Final number of partitions: 8
DSWP:  After partitioning the SCCDAG
DSWP:   SCC: 0 Internal nodes:
DSWP:       %.120 = phi i32 [ %111, %109 ], [ %.019, %104 ]
DSWP:       %.019 = phi i32 [ %.120.lcssa, %112 ], [ %45, %26 ]
DSWP:       %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:       %.120.lcssa = phi i32 [ %.120, %105 ]
DSWP:       %111 = sdiv i32 %110, 2
DSWP:   SCC: 1 Internal nodes:
DSWP:       %103 = sdiv i32 %102, 2
DSWP:       %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:       %.017 = phi i32 [ %.118.lcssa, %112 ], [ %42, %26 ]
DSWP:       %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:       %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:   SCC: 2 Internal nodes:
DSWP:       %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:       %95 = sdiv i32 %94, 2
DSWP:       %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:       %.015 = phi i32 [ %.116.lcssa, %112 ], [ %39, %26 ]
DSWP:       %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:   SCC: 3 Internal nodes:
DSWP:       %87 = sdiv i32 %86, 2
DSWP:       %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:       %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:       %.013 = phi i32 [ %.114.lcssa, %112 ], [ %36, %26 ]
DSWP:       %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:   SCC: 4 Internal nodes:
DSWP:       %79 = sdiv i32 %78, 2
DSWP:       %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:       %.011 = phi i32 [ %.112.lcssa, %112 ], [ %33, %26 ]
DSWP:       %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:       %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:   SCC: 5 Internal nodes:
DSWP:       %.110 = phi i32 [ %71, %69 ], [ %.09, %64 ]
DSWP:       %71 = sdiv i32 %70, 2
DSWP:       %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:       %.09 = phi i32 [ %.110.lcssa, %112 ], [ %31, %26 ]
DSWP:       %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:   SCC: 6 Internal nodes:
DSWP:       %.18 = phi i32 [ %63, %61 ], [ %.07, %56 ]
DSWP:       %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:       %63 = sdiv i32 %62, 2
DSWP:       %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:       %.07 = phi i32 [ %.18.lcssa, %112 ], [ %29, %26 ]
DSWP:   SCC: 7 Internal nodes:
DSWP:       %55 = sdiv i32 %54, 2
DSWP:       %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:       %54 = mul nsw i32 %.1, 3
DSWP:       %.1 = phi i32 [ %55, %53 ], [ %.06, %48 ]
DSWP:       %.06 = phi i32 [ %.1.lcssa, %112 ], [ %0, %26 ]
DSWP:   Set:  0
DSWP:    Children: 
DSWP:    Parents: Set:  1; 
DSWP:   Set:  1
DSWP:    Children: Set:  0; 
DSWP:    Parents: Set:  2; 
DSWP:   Set:  2
DSWP:    Children: Set:  1; 
DSWP:    Parents: Set:  3; 
DSWP:   Set:  3
DSWP:    Children: Set:  2; 
DSWP:    Parents: Set:  4; 
DSWP:   Set:  4
DSWP:    Children: Set:  3; 
DSWP:    Parents: Set:  5; 
DSWP:   Set:  5
DSWP:    Children: Set:  4; 
DSWP:    Parents: Set:  6; 
DSWP:   Set:  6
DSWP:    Children: Set:  5; 
DSWP:    Parents: Set:  7; 
DSWP:   Set:  7
DSWP:    Children: Set:  6; 
DSWP:    Parents: 
DSWP:  There are 8 partitions in the SCCDAG
DSWP:  Pipeline stages
DSWP:    Stage: 0
DSWP:     Internal nodes: 5
DSWP:     	  %55 = sdiv i32 %54, 2
DSWP:     	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     	  %54 = mul nsw i32 %.1, 3
DSWP:     	  %.1 = phi i32 [ %55, %53 ], [ %.06, %48 ]
DSWP:     	  %.06 = phi i32 [ %.1.lcssa, %112 ], [ %0, %26 ]
DSWP:     External nodes: 3
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:     	  br i1 %52, label %53, label %56, !prof !33
DSWP:     Edges: 9
DSWP:     	From:	  %55 = sdiv i32 %54, 2
DSWP:     	To:	  %.1 = phi i32 [ %55, %53 ], [ %.06, %48 ]
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %52, label %53, label %56, !prof !33
DSWP:     	To:	  %55 = sdiv i32 %54, 2
DSWP:     	CTRL
DSWP:     	From:	  %54 = mul nsw i32 %.1, 3
DSWP:     	To:	  %55 = sdiv i32 %54, 2
DSWP:     	RAW (must)
DSWP:     	From:	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     	To:	  %.06 = phi i32 [ %.1.lcssa, %112 ], [ %0, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     	To:	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     	CTRL
DSWP:     	From:	  %.06 = phi i32 [ %.1.lcssa, %112 ], [ %0, %26 ]
DSWP:     	To:	  %.1 = phi i32 [ %55, %53 ], [ %.06, %48 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.1 = phi i32 [ %55, %53 ], [ %.06, %48 ]
DSWP:     	To:	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.1 = phi i32 [ %55, %53 ], [ %.06, %48 ]
DSWP:     	To:	  %54 = mul nsw i32 %.1, 3
DSWP:     	RAW (must)
DSWP:    
DSWP:    Stage: 1
DSWP:     Internal nodes: 5
DSWP:     	  %.18 = phi i32 [ %63, %61 ], [ %.07, %56 ]
DSWP:     	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:     	  %63 = sdiv i32 %62, 2
DSWP:     	  %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:     	  %.07 = phi i32 [ %.18.lcssa, %112 ], [ %29, %26 ]
DSWP:     External nodes: 4
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	  %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:     	  br i1 %60, label %61, label %64, !prof !33
DSWP:     	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     Edges: 10
DSWP:     	From:	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:     	To:	  %63 = sdiv i32 %62, 2
DSWP:     	RAW (must)
DSWP:     	From:	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     	To:	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %60, label %61, label %64, !prof !33
DSWP:     	To:	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:     	CTRL
DSWP:     	From:	  %63 = sdiv i32 %62, 2
DSWP:     	To:	  %.18 = phi i32 [ %63, %61 ], [ %.07, %56 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.07 = phi i32 [ %.18.lcssa, %112 ], [ %29, %26 ]
DSWP:     	To:	  %.18 = phi i32 [ %63, %61 ], [ %.07, %56 ]
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.07 = phi i32 [ %.18.lcssa, %112 ], [ %29, %26 ]
DSWP:     	CTRL
DSWP:     	From:	  %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:     	To:	  %.07 = phi i32 [ %.18.lcssa, %112 ], [ %29, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:     	To:	  %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %.18 = phi i32 [ %63, %61 ], [ %.07, %56 ]
DSWP:     	To:	  %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.18 = phi i32 [ %63, %61 ], [ %.07, %56 ]
DSWP:     	To:	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:     	RAW (must)
DSWP:    
DSWP:    Stage: 2
DSWP:     Internal nodes: 5
DSWP:     	  %.110 = phi i32 [ %71, %69 ], [ %.09, %64 ]
DSWP:     	  %71 = sdiv i32 %70, 2
DSWP:     	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     	  %.09 = phi i32 [ %.110.lcssa, %112 ], [ %31, %26 ]
DSWP:     	  %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:     External nodes: 4
DSWP:     	  %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	  %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:     	  br i1 %68, label %69, label %72, !prof !33
DSWP:     Edges: 10
DSWP:     	From:	  %71 = sdiv i32 %70, 2
DSWP:     	To:	  %.110 = phi i32 [ %71, %69 ], [ %.09, %64 ]
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %68, label %69, label %72, !prof !33
DSWP:     	To:	  %71 = sdiv i32 %70, 2
DSWP:     	CTRL
DSWP:     	From:	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     	To:	  %.09 = phi i32 [ %.110.lcssa, %112 ], [ %31, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     	To:	  %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     	CTRL
DSWP:     	From:	  %.09 = phi i32 [ %.110.lcssa, %112 ], [ %31, %26 ]
DSWP:     	To:	  %.110 = phi i32 [ %71, %69 ], [ %.09, %64 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:     	To:	  %71 = sdiv i32 %70, 2
DSWP:     	RAW (must)
DSWP:     	From:	  %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:     	To:	  %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %.110 = phi i32 [ %71, %69 ], [ %.09, %64 ]
DSWP:     	To:	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.110 = phi i32 [ %71, %69 ], [ %.09, %64 ]
DSWP:     	To:	  %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:     	RAW (must)
DSWP:    
DSWP:    Stage: 3
DSWP:     Internal nodes: 5
DSWP:     	  %79 = sdiv i32 %78, 2
DSWP:     	  %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:     	  %.011 = phi i32 [ %.112.lcssa, %112 ], [ %33, %26 ]
DSWP:     	  %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:     	  %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:     External nodes: 4
DSWP:     	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	  %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:     	  br i1 %76, label %77, label %80, !prof !33
DSWP:     Edges: 10
DSWP:     	From:	  %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:     	To:	  %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:     	To:	  %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %76, label %77, label %80, !prof !33
DSWP:     	To:	  %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:     	CTRL
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:     	CTRL
DSWP:     	From:	  %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:     	To:	  %.011 = phi i32 [ %.112.lcssa, %112 ], [ %33, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:     	To:	  %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %.011 = phi i32 [ %.112.lcssa, %112 ], [ %33, %26 ]
DSWP:     	To:	  %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:     	To:	  %79 = sdiv i32 %78, 2
DSWP:     	RAW (must)
DSWP:     	From:	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     	To:	  %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %79 = sdiv i32 %78, 2
DSWP:     	To:	  %.112 = phi i32 [ %79, %77 ], [ %.011, %72 ]
DSWP:     	RAW (must)
DSWP:    
DSWP:    Stage: 4
DSWP:     Internal nodes: 5
DSWP:     	  %87 = sdiv i32 %86, 2
DSWP:     	  %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:     	  %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:     	  %.013 = phi i32 [ %.114.lcssa, %112 ], [ %36, %26 ]
DSWP:     	  %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:     External nodes: 4
DSWP:     	  %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:     	  %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:     	  br i1 %84, label %85, label %88, !prof !33
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     Edges: 10
DSWP:     	From:	  %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:     	To:	  %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:     	To:	  %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:     	CTRL
DSWP:     	From:	  br i1 %84, label %85, label %88, !prof !33
DSWP:     	To:	  %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:     	CTRL
DSWP:     	From:	  %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:     	To:	  %87 = sdiv i32 %86, 2
DSWP:     	RAW (must)
DSWP:     	From:	  %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:     	To:	  %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %.013 = phi i32 [ %.114.lcssa, %112 ], [ %36, %26 ]
DSWP:     	To:	  %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:     	To:	  %.013 = phi i32 [ %.114.lcssa, %112 ], [ %36, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:     	To:	  %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %87 = sdiv i32 %86, 2
DSWP:     	To:	  %.114 = phi i32 [ %87, %85 ], [ %.013, %80 ]
DSWP:     	RAW (must)
DSWP:    
DSWP:    Stage: 5
DSWP:     Internal nodes: 5
DSWP:     	  %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:     	  %95 = sdiv i32 %94, 2
DSWP:     	  %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:     	  %.015 = phi i32 [ %.116.lcssa, %112 ], [ %39, %26 ]
DSWP:     	  %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:     External nodes: 4
DSWP:     	  %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:     	  %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	  br i1 %92, label %93, label %96, !prof !33
DSWP:     Edges: 10
DSWP:     	From:	  %95 = sdiv i32 %94, 2
DSWP:     	To:	  %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %92, label %93, label %96, !prof !33
DSWP:     	To:	  %95 = sdiv i32 %94, 2
DSWP:     	CTRL
DSWP:     	From:	  %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:     	To:	  %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:     	To:	  %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:     	CTRL
DSWP:     	From:	  %.015 = phi i32 [ %.116.lcssa, %112 ], [ %39, %26 ]
DSWP:     	To:	  %.116 = phi i32 [ %95, %93 ], [ %.015, %88 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:     	To:	  %95 = sdiv i32 %94, 2
DSWP:     	RAW (must)
DSWP:     	From:	  %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:     	To:	  %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:     	To:	  %.015 = phi i32 [ %.116.lcssa, %112 ], [ %39, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:     	To:	  %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:     	RAW (must)
DSWP:    
DSWP:    Stage: 6
DSWP:     Internal nodes: 5
DSWP:     	  %103 = sdiv i32 %102, 2
DSWP:     	  %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:     	  %.017 = phi i32 [ %.118.lcssa, %112 ], [ %42, %26 ]
DSWP:     	  %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:     	  %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:     External nodes: 4
DSWP:     	  %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:     	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:     	  br i1 %100, label %101, label %104, !prof !33
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     Edges: 10
DSWP:     	From:	  %.017 = phi i32 [ %.118.lcssa, %112 ], [ %42, %26 ]
DSWP:     	To:	  %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.017 = phi i32 [ %.118.lcssa, %112 ], [ %42, %26 ]
DSWP:     	CTRL
DSWP:     	From:	  %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:     	To:	  %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:     	To:	  %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %100, label %101, label %104, !prof !33
DSWP:     	To:	  %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:     	CTRL
DSWP:     	From:	  %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:     	To:	  %.017 = phi i32 [ %.118.lcssa, %112 ], [ %42, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:     	To:	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:     	To:	  %103 = sdiv i32 %102, 2
DSWP:     	RAW (must)
DSWP:     	From:	  %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:     	To:	  %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %103 = sdiv i32 %102, 2
DSWP:     	To:	  %.118 = phi i32 [ %103, %101 ], [ %.017, %96 ]
DSWP:     	RAW (must)
DSWP:    
DSWP:    Stage: 7
DSWP:     Internal nodes: 5
DSWP:     	  %.120 = phi i32 [ %111, %109 ], [ %.019, %104 ]
DSWP:     	  %.019 = phi i32 [ %.120.lcssa, %112 ], [ %45, %26 ]
DSWP:     	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:     	  %.120.lcssa = phi i32 [ %.120, %105 ]
DSWP:     	  %111 = sdiv i32 %110, 2
DSWP:     External nodes: 3
DSWP:     	  %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:     	  br i1 %108, label %109, label %112, !prof !33
DSWP:     	  br i1 %47, label %48, label %113, !prof !32
DSWP:     Edges: 9
DSWP:     	From:	  %.019 = phi i32 [ %.120.lcssa, %112 ], [ %45, %26 ]
DSWP:     	To:	  %.120 = phi i32 [ %111, %109 ], [ %.019, %104 ]
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %47, label %48, label %113, !prof !32
DSWP:     	To:	  %.019 = phi i32 [ %.120.lcssa, %112 ], [ %45, %26 ]
DSWP:     	CTRL
DSWP:     	From:	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:     	To:	  %111 = sdiv i32 %110, 2
DSWP:     	RAW (must)
DSWP:     	From:	  br i1 %108, label %109, label %112, !prof !33
DSWP:     	To:	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:     	CTRL
DSWP:     	From:	  %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:     	To:	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:     	RAW (must)
DSWP:     	From:	  %.120.lcssa = phi i32 [ %.120, %105 ]
DSWP:     	To:	  %.019 = phi i32 [ %.120.lcssa, %112 ], [ %45, %26 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %111 = sdiv i32 %110, 2
DSWP:     	To:	  %.120 = phi i32 [ %111, %109 ], [ %.019, %104 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.120 = phi i32 [ %111, %109 ], [ %.019, %104 ]
DSWP:     	To:	  %.120.lcssa = phi i32 [ %.120, %105 ]
DSWP:     	RAW (must)
DSWP:     	From:	  %.120 = phi i32 [ %111, %109 ], [ %.019, %104 ]
DSWP:     	To:	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:     	RAW (must)
DSWP:    
DSWP:  Queues that connect the pipeline stages
DSWP:    Stage: 0
DSWP:      Push value queues: 0 
DSWP:      Pop value queues: 
DSWP:    Stage: 1
DSWP:      Push value queues: 1 
DSWP:      Pop value queues: 0 
DSWP:    Stage: 2
DSWP:      Push value queues: 2 
DSWP:      Pop value queues: 1 
DSWP:    Stage: 3
DSWP:      Push value queues: 3 
DSWP:      Pop value queues: 2 
DSWP:    Stage: 4
DSWP:      Push value queues: 4 
DSWP:      Pop value queues: 3 
DSWP:    Stage: 5
DSWP:      Push value queues: 5 
DSWP:      Pop value queues: 4 
DSWP:    Stage: 6
DSWP:      Push value queues: 6 
DSWP:      Pop value queues: 5 
DSWP:    Stage: 7
DSWP:      Push value queues: 
DSWP:      Pop value queues: 6 
DSWP:    Queue: 0
DSWP:     Producer:	  %.1.lcssa = phi i32 [ %.1, %49 ]
DSWP:     Consumer:	  %62 = mul nsw i32 %.18, %.1.lcssa
DSWP:    Queue: 1
DSWP:     Producer:	  %.18.lcssa = phi i32 [ %.18, %57 ]
DSWP:     Consumer:	  %70 = mul nsw i32 %.110, %.18.lcssa
DSWP:    Queue: 2
DSWP:     Producer:	  %.110.lcssa = phi i32 [ %.110, %65 ]
DSWP:     Consumer:	  %78 = mul nsw i32 %.112, %.110.lcssa
DSWP:    Queue: 3
DSWP:     Producer:	  %.112.lcssa = phi i32 [ %.112, %73 ]
DSWP:     Consumer:	  %86 = mul nsw i32 %.114, %.112.lcssa
DSWP:    Queue: 4
DSWP:     Producer:	  %.114.lcssa = phi i32 [ %.114, %81 ]
DSWP:     Consumer:	  %94 = mul nsw i32 %.116, %.114.lcssa
DSWP:    Queue: 5
DSWP:     Producer:	  %.116.lcssa = phi i32 [ %.116, %89 ]
DSWP:     Consumer:	  %102 = mul nsw i32 %.118, %.116.lcssa
DSWP:    Queue: 6
DSWP:     Producer:	  %.118.lcssa = phi i32 [ %.118, %97 ]
DSWP:     Consumer:	  %110 = mul nsw i32 %.120, %.118.lcssa
DSWP:  Environment
DSWP:    Pre loop env 1, producer:	  %29 = add nsw i32 %28, 1
DSWP:    Pre loop env 2, producer:	  %3 = alloca [8 x i64], align 16
DSWP:    Pre loop env 3, producer:	  %18 = tail call i64 @atoll(i8* %17) #22
DSWP:    Pre loop env 4, producer:	  %39 = add nsw i32 %38, 1
DSWP:    Pre loop env 5, producer:	  %31 = add nsw i32 %30, 1
DSWP:    Pre loop env 6, producer:	  %42 = add nsw i32 %41, 1
DSWP:    Pre loop env 7, producer:	i32 %0
DSWP:    Pre loop env 8, producer:	  %33 = add nsw i32 %32, 1
DSWP:    Pre loop env 9, producer:	  %36 = add nsw i32 %35, 1
DSWP:    Pre loop env 10, producer:	  %45 = add nsw i32 %44, 1
DSWP:    Post loop env 11, producer:	  %.011 = phi i32 [ %.112.lcssa, %112 ], [ %33, %26 ]
DSWP:    Post loop env 12, producer:	  %.015 = phi i32 [ %.116.lcssa, %112 ], [ %39, %26 ]
DSWP:    Post loop env 13, producer:	  %.019 = phi i32 [ %.120.lcssa, %112 ], [ %45, %26 ]
DSWP:    Post loop env 14, producer:	  %.09 = phi i32 [ %.110.lcssa, %112 ], [ %31, %26 ]
DSWP:    Post loop env 15, producer:	  %.017 = phi i32 [ %.118.lcssa, %112 ], [ %42, %26 ]
DSWP:    Post loop env 16, producer:	  %.013 = phi i32 [ %.114.lcssa, %112 ], [ %36, %26 ]
DSWP:    Post loop env 17, producer:	  %.06 = phi i32 [ %.1.lcssa, %112 ], [ %0, %26 ]
DSWP:    Post loop env 18, producer:	  %.07 = phi i32 [ %.18.lcssa, %112 ], [ %29, %26 ]
DSWP:  Create 8 pipeline stages
Pipeline stage 0:

define void @0(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 0
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %10 = bitcast i64* %9 to [8 x i64]**
  %11 = load [8 x i64]*, [8 x i64]** %10
  %12 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %13 = load i64, i64* %12
  %14 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 104
  %15 = bitcast i64* %14 to i32*
  %16 = load i32, i32* %15
  %17 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 96
  %18 = bitcast i64* %17 to i32*
  br label %26

; <label>:19:                                     ; preds = %20
  ret void

; <label>:20:                                     ; preds = %26
  store i32 %28, i32* %18
  br label %19

; <label>:21:                                     ; preds = %55
  br label %56

; <label>:22:                                     ; preds = %56
  br label %57

; <label>:23:                                     ; preds = %57
  %24 = add nuw i64 %27, 1
  br label %26

; <label>:25:                                     ; preds = %54
  br label %55

; <label>:26:                                     ; preds = %2, %23
  %27 = phi i64 [ %24, %23 ], [ 0, %2 ]
  %28 = phi i32 [ %42, %23 ], [ %16, %2 ]
  %29 = icmp sgt i64 %13, %27
  br i1 %29, label %30, label %20, !prof !29

; <label>:30:                                     ; preds = %26
  br label %31

; <label>:31:                                     ; preds = %37, %30
  %32 = phi i64 [ %40, %37 ], [ 0, %30 ]
  %33 = phi i32 [ %39, %37 ], [ %28, %30 ]
  %34 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 0
  %35 = load i64, i64* %34, align 16
  %36 = icmp sgt i64 %35, %32
  br i1 %36, label %37, label %41, !prof !30

; <label>:37:                                     ; preds = %31
  %38 = mul nsw i32 %33, 3
  %39 = sdiv i32 %38, 2
  %40 = add nuw i64 %32, 1
  br label %31

; <label>:41:                                     ; preds = %31
  %42 = phi i32 [ %33, %31 ]
  store i32 %42, i32* %8
  %43 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to void (%"class.MARC::ThreadSafeQueue.42"*, i32)***
  %44 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)**, void (%"class.MARC::ThreadSafeQueue.42"*, i32)*** %43, align 8, !tbaa !31
  %45 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %44, i64 3
  %46 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %45, align 8
  %47 = load i32, i32* %8, align 4, !tbaa !34
  call void %46(%"class.MARC::ThreadSafeQueue.42"* %7, i32 %47)
  br label %51

; <label>:48:                                     ; preds = %51
  br label %52

; <label>:49:                                     ; preds = %52
  br label %53

; <label>:50:                                     ; preds = %53
  br label %54

; <label>:51:                                     ; preds = %41, %64
  br label %48

; <label>:52:                                     ; preds = %48, %63
  br label %49

; <label>:53:                                     ; preds = %49, %62
  br label %50

; <label>:54:                                     ; preds = %50, %61
  br label %25

; <label>:55:                                     ; preds = %25, %60
  br label %21

; <label>:56:                                     ; preds = %59, %21
  br label %22

; <label>:57:                                     ; preds = %58, %22
  br label %23
                                                  ; No predecessors!
  br label %57
                                                  ; No predecessors!
  br label %56
                                                  ; No predecessors!
  br label %55
                                                  ; No predecessors!
  br label %54
                                                  ; No predecessors!
  br label %53
                                                  ; No predecessors!
  br label %52
                                                  ; No predecessors!
  br label %51
}

Pipeline stage 1:

define void @1(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 1
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 0
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.42"**
  %11 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 24
  %14 = bitcast i64* %13 to i32*
  %15 = load i32, i32* %14
  %16 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %17 = bitcast i64* %16 to [8 x i64]**
  %18 = load [8 x i64]*, [8 x i64]** %17
  %19 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %20 = load i64, i64* %19
  %21 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 128
  %22 = bitcast i64* %21 to i32*
  br label %30

; <label>:23:                                     ; preds = %24
  ret void

; <label>:24:                                     ; preds = %30
  store i32 %32, i32* %22
  br label %23

; <label>:25:                                     ; preds = %65
  br label %66

; <label>:26:                                     ; preds = %66
  br label %67

; <label>:27:                                     ; preds = %67
  %28 = add nuw i64 %31, 1
  br label %30

; <label>:29:                                     ; preds = %64
  br label %65

; <label>:30:                                     ; preds = %2, %27
  %31 = phi i64 [ %28, %27 ], [ 0, %2 ]
  %32 = phi i32 [ %53, %27 ], [ %15, %2 ]
  %33 = icmp sgt i64 %20, %31
  br i1 %33, label %34, label %24, !prof !29

; <label>:34:                                     ; preds = %30
  br label %61

; <label>:35:                                     ; preds = %61
  %36 = bitcast %"class.MARC::ThreadSafeQueue.42"* %11 to i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)***
  %37 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*** %36, align 8, !tbaa !30
  %38 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %37, i64 1
  %39 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %38, align 8
  %40 = call zeroext i1 %39(%"class.MARC::ThreadSafeQueue.42"* %11, i32* dereferenceable(4) %12)
  %41 = load i32, i32* %12
  br label %42

; <label>:42:                                     ; preds = %48, %35
  %43 = phi i64 [ %51, %48 ], [ 0, %35 ]
  %44 = phi i32 [ %50, %48 ], [ %32, %35 ]
  %45 = getelementptr inbounds [8 x i64], [8 x i64]* %18, i64 0, i64 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp sgt i64 %46, %43
  br i1 %47, label %48, label %52, !prof !33

; <label>:48:                                     ; preds = %42
  %49 = mul nsw i32 %44, %41
  %50 = sdiv i32 %49, 2
  %51 = add nuw i64 %43, 1
  br label %42

; <label>:52:                                     ; preds = %42
  %53 = phi i32 [ %44, %42 ]
  store i32 %53, i32* %8
  %54 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to void (%"class.MARC::ThreadSafeQueue.42"*, i32)***
  %55 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)**, void (%"class.MARC::ThreadSafeQueue.42"*, i32)*** %54, align 8, !tbaa !30
  %56 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %55, i64 3
  %57 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %56, align 8
  %58 = load i32, i32* %8, align 4, !tbaa !34
  call void %57(%"class.MARC::ThreadSafeQueue.42"* %7, i32 %58)
  br label %62

; <label>:59:                                     ; preds = %62
  br label %63

; <label>:60:                                     ; preds = %63
  br label %64

; <label>:61:                                     ; preds = %34, %74
  br label %35

; <label>:62:                                     ; preds = %52, %73
  br label %59

; <label>:63:                                     ; preds = %59, %72
  br label %60

; <label>:64:                                     ; preds = %71, %60
  br label %29

; <label>:65:                                     ; preds = %29, %70
  br label %25

; <label>:66:                                     ; preds = %69, %25
  br label %26

; <label>:67:                                     ; preds = %68, %26
  br label %27
                                                  ; No predecessors!
  br label %67
                                                  ; No predecessors!
  br label %66
                                                  ; No predecessors!
  br label %65
                                                  ; No predecessors!
  br label %64
                                                  ; No predecessors!
  br label %63
                                                  ; No predecessors!
  br label %62
                                                  ; No predecessors!
  br label %61
}

Pipeline stage 2:

define void @2(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 2
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 1
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.42"**
  %11 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %14 = bitcast i64* %13 to [8 x i64]**
  %15 = load [8 x i64]*, [8 x i64]** %14
  %16 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %17 = load i64, i64* %16
  %18 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 72
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19
  %21 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 32
  %22 = bitcast i64* %21 to i32*
  br label %30

; <label>:23:                                     ; preds = %24
  ret void

; <label>:24:                                     ; preds = %30
  store i32 %32, i32* %22
  br label %23

; <label>:25:                                     ; preds = %65
  br label %66

; <label>:26:                                     ; preds = %66
  br label %67

; <label>:27:                                     ; preds = %67
  %28 = add nuw i64 %31, 1
  br label %30

; <label>:29:                                     ; preds = %64
  br label %65

; <label>:30:                                     ; preds = %2, %27
  %31 = phi i64 [ %28, %27 ], [ 0, %2 ]
  %32 = phi i32 [ %54, %27 ], [ %20, %2 ]
  %33 = icmp sgt i64 %17, %31
  br i1 %33, label %34, label %24, !prof !29

; <label>:34:                                     ; preds = %30
  br label %61

; <label>:35:                                     ; preds = %61
  br label %62

; <label>:36:                                     ; preds = %62
  %37 = bitcast %"class.MARC::ThreadSafeQueue.42"* %11 to i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)***
  %38 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*** %37, align 8, !tbaa !30
  %39 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %38, i64 1
  %40 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %39, align 8
  %41 = call zeroext i1 %40(%"class.MARC::ThreadSafeQueue.42"* %11, i32* dereferenceable(4) %12)
  %42 = load i32, i32* %12
  br label %43

; <label>:43:                                     ; preds = %49, %36
  %44 = phi i64 [ %52, %49 ], [ 0, %36 ]
  %45 = phi i32 [ %51, %49 ], [ %32, %36 ]
  %46 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 2
  %47 = load i64, i64* %46, align 16
  %48 = icmp sgt i64 %47, %44
  br i1 %48, label %49, label %53, !prof !33

; <label>:49:                                     ; preds = %43
  %50 = mul nsw i32 %45, %42
  %51 = sdiv i32 %50, 2
  %52 = add nuw i64 %44, 1
  br label %43

; <label>:53:                                     ; preds = %43
  %54 = phi i32 [ %45, %43 ]
  store i32 %54, i32* %8
  %55 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to void (%"class.MARC::ThreadSafeQueue.42"*, i32)***
  %56 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)**, void (%"class.MARC::ThreadSafeQueue.42"*, i32)*** %55, align 8, !tbaa !30
  %57 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %56, i64 3
  %58 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %57, align 8
  %59 = load i32, i32* %8, align 4, !tbaa !34
  call void %58(%"class.MARC::ThreadSafeQueue.42"* %7, i32 %59)
  br label %63

; <label>:60:                                     ; preds = %63
  br label %64

; <label>:61:                                     ; preds = %74, %34
  br label %35

; <label>:62:                                     ; preds = %73, %35
  br label %36

; <label>:63:                                     ; preds = %53, %72
  br label %60

; <label>:64:                                     ; preds = %60, %71
  br label %29

; <label>:65:                                     ; preds = %29, %70
  br label %25

; <label>:66:                                     ; preds = %69, %25
  br label %26

; <label>:67:                                     ; preds = %68, %26
  br label %27
                                                  ; No predecessors!
  br label %67
                                                  ; No predecessors!
  br label %66
                                                  ; No predecessors!
  br label %65
                                                  ; No predecessors!
  br label %64
                                                  ; No predecessors!
  br label %63
                                                  ; No predecessors!
  br label %62
                                                  ; No predecessors!
  br label %61
}

Pipeline stage 3:

define void @3(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 3
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 2
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.42"**
  %11 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %14 = bitcast i64* %13 to [8 x i64]**
  %15 = load [8 x i64]*, [8 x i64]** %14
  %16 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %17 = load i64, i64* %16
  %18 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 112
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19
  %21 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 0
  %22 = bitcast i64* %21 to i32*
  br label %30

; <label>:23:                                     ; preds = %24
  ret void

; <label>:24:                                     ; preds = %30
  store i32 %32, i32* %22
  br label %23

; <label>:25:                                     ; preds = %65
  br label %66

; <label>:26:                                     ; preds = %66
  br label %67

; <label>:27:                                     ; preds = %67
  %28 = add nuw i64 %31, 1
  br label %30

; <label>:29:                                     ; preds = %64
  br label %65

; <label>:30:                                     ; preds = %2, %27
  %31 = phi i64 [ %28, %27 ], [ 0, %2 ]
  %32 = phi i32 [ %55, %27 ], [ %20, %2 ]
  %33 = icmp sgt i64 %17, %31
  br i1 %33, label %34, label %24, !prof !29

; <label>:34:                                     ; preds = %30
  br label %61

; <label>:35:                                     ; preds = %61
  br label %62

; <label>:36:                                     ; preds = %62
  br label %63

; <label>:37:                                     ; preds = %63
  %38 = bitcast %"class.MARC::ThreadSafeQueue.42"* %11 to i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)***
  %39 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*** %38, align 8, !tbaa !30
  %40 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %39, i64 1
  %41 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %40, align 8
  %42 = call zeroext i1 %41(%"class.MARC::ThreadSafeQueue.42"* %11, i32* dereferenceable(4) %12)
  %43 = load i32, i32* %12
  br label %44

; <label>:44:                                     ; preds = %50, %37
  %45 = phi i64 [ %53, %50 ], [ 0, %37 ]
  %46 = phi i32 [ %52, %50 ], [ %32, %37 ]
  %47 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 3
  %48 = load i64, i64* %47, align 8
  %49 = icmp sgt i64 %48, %45
  br i1 %49, label %50, label %54, !prof !33

; <label>:50:                                     ; preds = %44
  %51 = mul nsw i32 %46, %43
  %52 = sdiv i32 %51, 2
  %53 = add nuw i64 %45, 1
  br label %44

; <label>:54:                                     ; preds = %44
  %55 = phi i32 [ %46, %44 ]
  store i32 %55, i32* %8
  %56 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to void (%"class.MARC::ThreadSafeQueue.42"*, i32)***
  %57 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)**, void (%"class.MARC::ThreadSafeQueue.42"*, i32)*** %56, align 8, !tbaa !30
  %58 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %57, i64 3
  %59 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %58, align 8
  %60 = load i32, i32* %8, align 4, !tbaa !34
  call void %59(%"class.MARC::ThreadSafeQueue.42"* %7, i32 %60)
  br label %64

; <label>:61:                                     ; preds = %34, %74
  br label %35

; <label>:62:                                     ; preds = %35, %73
  br label %36

; <label>:63:                                     ; preds = %72, %36
  br label %37

; <label>:64:                                     ; preds = %54, %71
  br label %29

; <label>:65:                                     ; preds = %29, %70
  br label %25

; <label>:66:                                     ; preds = %69, %25
  br label %26

; <label>:67:                                     ; preds = %26, %68
  br label %27
                                                  ; No predecessors!
  br label %67
                                                  ; No predecessors!
  br label %66
                                                  ; No predecessors!
  br label %65
                                                  ; No predecessors!
  br label %64
                                                  ; No predecessors!
  br label %63
                                                  ; No predecessors!
  br label %62
                                                  ; No predecessors!
  br label %61
}

Pipeline stage 4:

define void @4(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 4
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 3
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.42"**
  %11 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %14 = bitcast i64* %13 to [8 x i64]**
  %15 = load [8 x i64]*, [8 x i64]** %14
  %16 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %17 = load i64, i64* %16
  %18 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 120
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19
  %21 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 80
  %22 = bitcast i64* %21 to i32*
  br label %40

; <label>:23:                                     ; preds = %24
  ret void

; <label>:24:                                     ; preds = %40
  store i32 %42, i32* %22
  br label %23

; <label>:25:                                     ; preds = %65
  br label %66

; <label>:26:                                     ; preds = %66
  br label %67

; <label>:27:                                     ; preds = %67
  %28 = add nuw i64 %41, 1
  br label %40

; <label>:29:                                     ; preds = %55
  %30 = mul nsw i32 %57, %54
  %31 = sdiv i32 %30, 2
  %32 = add nuw i64 %56, 1
  br label %55

; <label>:33:                                     ; preds = %55
  %34 = phi i32 [ %57, %55 ]
  store i32 %34, i32* %8
  %35 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to void (%"class.MARC::ThreadSafeQueue.42"*, i32)***
  %36 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)**, void (%"class.MARC::ThreadSafeQueue.42"*, i32)*** %35, align 8, !tbaa !29
  %37 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %36, i64 3
  %38 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %37, align 8
  %39 = load i32, i32* %8, align 4, !tbaa !32
  call void %38(%"class.MARC::ThreadSafeQueue.42"* %7, i32 %39)
  br label %65

; <label>:40:                                     ; preds = %2, %27
  %41 = phi i64 [ %28, %27 ], [ 0, %2 ]
  %42 = phi i32 [ %34, %27 ], [ %20, %2 ]
  %43 = icmp sgt i64 %17, %41
  br i1 %43, label %44, label %24, !prof !35

; <label>:44:                                     ; preds = %40
  br label %61

; <label>:45:                                     ; preds = %61
  br label %62

; <label>:46:                                     ; preds = %62
  br label %63

; <label>:47:                                     ; preds = %63
  br label %64

; <label>:48:                                     ; preds = %64
  %49 = bitcast %"class.MARC::ThreadSafeQueue.42"* %11 to i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)***
  %50 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*** %49, align 8, !tbaa !29
  %51 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %50, i64 1
  %52 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %51, align 8
  %53 = call zeroext i1 %52(%"class.MARC::ThreadSafeQueue.42"* %11, i32* dereferenceable(4) %12)
  %54 = load i32, i32* %12
  br label %55

; <label>:55:                                     ; preds = %29, %48
  %56 = phi i64 [ %32, %29 ], [ 0, %48 ]
  %57 = phi i32 [ %31, %29 ], [ %42, %48 ]
  %58 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 4
  %59 = load i64, i64* %58, align 16
  %60 = icmp sgt i64 %59, %56
  br i1 %60, label %29, label %33, !prof !36

; <label>:61:                                     ; preds = %44, %74
  br label %45

; <label>:62:                                     ; preds = %45, %73
  br label %46

; <label>:63:                                     ; preds = %72, %46
  br label %47

; <label>:64:                                     ; preds = %47, %71
  br label %48

; <label>:65:                                     ; preds = %33, %70
  br label %25

; <label>:66:                                     ; preds = %69, %25
  br label %26

; <label>:67:                                     ; preds = %68, %26
  br label %27
                                                  ; No predecessors!
  br label %67
                                                  ; No predecessors!
  br label %66
                                                  ; No predecessors!
  br label %65
                                                  ; No predecessors!
  br label %64
                                                  ; No predecessors!
  br label %63
                                                  ; No predecessors!
  br label %62
                                                  ; No predecessors!
  br label %61
}

Pipeline stage 5:

define void @5(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 5
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 4
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.42"**
  %11 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %14 = bitcast i64* %13 to [8 x i64]**
  %15 = load [8 x i64]*, [8 x i64]** %14
  %16 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %17 = load i64, i64* %16
  %18 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 64
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19
  %21 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 8
  %22 = bitcast i64* %21 to i32*
  br label %52

; <label>:23:                                     ; preds = %24
  ret void

; <label>:24:                                     ; preds = %52
  store i32 %54, i32* %22
  br label %23

; <label>:25:                                     ; preds = %45, %31
  %26 = phi i64 [ %34, %31 ], [ 0, %45 ]
  %27 = phi i32 [ %33, %31 ], [ %54, %45 ]
  %28 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 5
  %29 = load i64, i64* %28, align 8
  %30 = icmp sgt i64 %29, %26
  br i1 %30, label %31, label %35, !prof !29

; <label>:31:                                     ; preds = %25
  %32 = mul nsw i32 %27, %51
  %33 = sdiv i32 %32, 2
  %34 = add nuw i64 %26, 1
  br label %25

; <label>:35:                                     ; preds = %25
  %36 = phi i32 [ %27, %25 ]
  store i32 %36, i32* %8
  %37 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to void (%"class.MARC::ThreadSafeQueue.42"*, i32)***
  %38 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)**, void (%"class.MARC::ThreadSafeQueue.42"*, i32)*** %37, align 8, !tbaa !30
  %39 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %38, i64 3
  %40 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %39, align 8
  %41 = load i32, i32* %8, align 4, !tbaa !33
  call void %40(%"class.MARC::ThreadSafeQueue.42"* %7, i32 %41)
  br label %66

; <label>:42:                                     ; preds = %66
  br label %67

; <label>:43:                                     ; preds = %67
  %44 = add nuw i64 %53, 1
  br label %52

; <label>:45:                                     ; preds = %65
  %46 = bitcast %"class.MARC::ThreadSafeQueue.42"* %11 to i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)***
  %47 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*** %46, align 8, !tbaa !30
  %48 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %47, i64 1
  %49 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %48, align 8
  %50 = call zeroext i1 %49(%"class.MARC::ThreadSafeQueue.42"* %11, i32* dereferenceable(4) %12)
  %51 = load i32, i32* %12
  br label %25

; <label>:52:                                     ; preds = %2, %43
  %53 = phi i64 [ %44, %43 ], [ 0, %2 ]
  %54 = phi i32 [ %36, %43 ], [ %20, %2 ]
  %55 = icmp sgt i64 %17, %53
  br i1 %55, label %56, label %24, !prof !36

; <label>:56:                                     ; preds = %52
  br label %61

; <label>:57:                                     ; preds = %61
  br label %62

; <label>:58:                                     ; preds = %62
  br label %63

; <label>:59:                                     ; preds = %63
  br label %64

; <label>:60:                                     ; preds = %64
  br label %65

; <label>:61:                                     ; preds = %56, %74
  br label %57

; <label>:62:                                     ; preds = %57, %73
  br label %58

; <label>:63:                                     ; preds = %58, %72
  br label %59

; <label>:64:                                     ; preds = %59, %71
  br label %60

; <label>:65:                                     ; preds = %70, %60
  br label %45

; <label>:66:                                     ; preds = %69, %35
  br label %42

; <label>:67:                                     ; preds = %68, %42
  br label %43
                                                  ; No predecessors!
  br label %67
                                                  ; No predecessors!
  br label %66
                                                  ; No predecessors!
  br label %65
                                                  ; No predecessors!
  br label %64
                                                  ; No predecessors!
  br label %63
                                                  ; No predecessors!
  br label %62
                                                  ; No predecessors!
  br label %61
}

Pipeline stage 6:

define void @6(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 6
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 5
  %10 = bitcast i8** %9 to %"class.MARC::ThreadSafeQueue.42"**
  %11 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %10
  %12 = alloca i32
  %13 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %14 = bitcast i64* %13 to [8 x i64]**
  %15 = load [8 x i64]*, [8 x i64]** %14
  %16 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %17 = load i64, i64* %16
  %18 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 88
  %19 = bitcast i64* %18 to i32*
  %20 = load i32, i32* %19
  %21 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 40
  %22 = bitcast i64* %21 to i32*
  br label %52

; <label>:23:                                     ; preds = %24
  ret void

; <label>:24:                                     ; preds = %52
  store i32 %54, i32* %22
  br label %23

; <label>:25:                                     ; preds = %66
  %26 = bitcast %"class.MARC::ThreadSafeQueue.42"* %11 to i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)***
  %27 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*** %26, align 8, !tbaa !29
  %28 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %27, i64 1
  %29 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %28, align 8
  %30 = call zeroext i1 %29(%"class.MARC::ThreadSafeQueue.42"* %11, i32* dereferenceable(4) %12)
  %31 = load i32, i32* %12
  br label %32

; <label>:32:                                     ; preds = %38, %25
  %33 = phi i64 [ %41, %38 ], [ 0, %25 ]
  %34 = phi i32 [ %40, %38 ], [ %54, %25 ]
  %35 = getelementptr inbounds [8 x i64], [8 x i64]* %15, i64 0, i64 6
  %36 = load i64, i64* %35, align 16
  %37 = icmp sgt i64 %36, %33
  br i1 %37, label %38, label %42, !prof !32

; <label>:38:                                     ; preds = %32
  %39 = mul nsw i32 %34, %31
  %40 = sdiv i32 %39, 2
  %41 = add nuw i64 %33, 1
  br label %32

; <label>:42:                                     ; preds = %32
  %43 = phi i32 [ %34, %32 ]
  store i32 %43, i32* %8
  %44 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to void (%"class.MARC::ThreadSafeQueue.42"*, i32)***
  %45 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)**, void (%"class.MARC::ThreadSafeQueue.42"*, i32)*** %44, align 8, !tbaa !29
  %46 = getelementptr inbounds void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %45, i64 3
  %47 = load void (%"class.MARC::ThreadSafeQueue.42"*, i32)*, void (%"class.MARC::ThreadSafeQueue.42"*, i32)** %46, align 8
  %48 = load i32, i32* %8, align 4, !tbaa !33
  call void %47(%"class.MARC::ThreadSafeQueue.42"* %7, i32 %48)
  br label %67

; <label>:49:                                     ; preds = %67
  %50 = add nuw i64 %53, 1
  br label %52

; <label>:51:                                     ; preds = %65
  br label %66

; <label>:52:                                     ; preds = %2, %49
  %53 = phi i64 [ %50, %49 ], [ 0, %2 ]
  %54 = phi i32 [ %43, %49 ], [ %20, %2 ]
  %55 = icmp sgt i64 %17, %53
  br i1 %55, label %56, label %24, !prof !36

; <label>:56:                                     ; preds = %52
  br label %61

; <label>:57:                                     ; preds = %61
  br label %62

; <label>:58:                                     ; preds = %62
  br label %63

; <label>:59:                                     ; preds = %63
  br label %64

; <label>:60:                                     ; preds = %64
  br label %65

; <label>:61:                                     ; preds = %56, %74
  br label %57

; <label>:62:                                     ; preds = %57, %73
  br label %58

; <label>:63:                                     ; preds = %58, %72
  br label %59

; <label>:64:                                     ; preds = %59, %71
  br label %60

; <label>:65:                                     ; preds = %60, %70
  br label %51

; <label>:66:                                     ; preds = %51, %69
  br label %25

; <label>:67:                                     ; preds = %42, %68
  br label %49
                                                  ; No predecessors!
  br label %67
                                                  ; No predecessors!
  br label %66
                                                  ; No predecessors!
  br label %65
                                                  ; No predecessors!
  br label %64
                                                  ; No predecessors!
  br label %63
                                                  ; No predecessors!
  br label %62
                                                  ; No predecessors!
  br label %61
}

Pipeline stage 7:

define void @7(i8*, i8*) {
  %3 = bitcast i8* %0 to [144 x i64]*
  %4 = bitcast i8* %1 to [7 x i8*]*
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %4, i64 0, i64 6
  %6 = bitcast i8** %5 to %"class.MARC::ThreadSafeQueue.42"**
  %7 = load %"class.MARC::ThreadSafeQueue.42"*, %"class.MARC::ThreadSafeQueue.42"** %6
  %8 = alloca i32
  %9 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %10 = bitcast i64* %9 to [8 x i64]**
  %11 = load [8 x i64]*, [8 x i64]** %10
  %12 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %13 = load i64, i64* %12
  %14 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 136
  %15 = bitcast i64* %14 to i32*
  %16 = load i32, i32* %15
  %17 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 16
  %18 = bitcast i64* %17 to i32*
  br label %43

; <label>:19:                                     ; preds = %20
  ret void

; <label>:20:                                     ; preds = %43
  store i32 %45, i32* %18
  br label %19

; <label>:21:                                     ; preds = %57
  br label %58

; <label>:22:                                     ; preds = %58
  %23 = bitcast %"class.MARC::ThreadSafeQueue.42"* %7 to i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)***
  %24 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)**, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*** %23, align 8, !tbaa !29
  %25 = getelementptr inbounds i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %24, i64 1
  %26 = load i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)*, i1 (%"class.MARC::ThreadSafeQueue.42"*, i32*)** %25, align 8
  %27 = call zeroext i1 %26(%"class.MARC::ThreadSafeQueue.42"* %7, i32* dereferenceable(4) %8)
  %28 = load i32, i32* %8
  br label %29

; <label>:29:                                     ; preds = %35, %22
  %30 = phi i64 [ %38, %35 ], [ 0, %22 ]
  %31 = phi i32 [ %37, %35 ], [ %45, %22 ]
  %32 = getelementptr inbounds [8 x i64], [8 x i64]* %11, i64 0, i64 7
  %33 = load i64, i64* %32, align 8
  %34 = icmp sgt i64 %33, %30
  br i1 %34, label %35, label %39, !prof !32

; <label>:35:                                     ; preds = %29
  %36 = mul nsw i32 %31, %28
  %37 = sdiv i32 %36, 2
  %38 = add nuw i64 %30, 1
  br label %29

; <label>:39:                                     ; preds = %29
  %40 = phi i32 [ %31, %29 ]
  %41 = add nuw i64 %44, 1
  br label %43

; <label>:42:                                     ; preds = %56
  br label %57

; <label>:43:                                     ; preds = %2, %39
  %44 = phi i64 [ %41, %39 ], [ 0, %2 ]
  %45 = phi i32 [ %40, %39 ], [ %16, %2 ]
  %46 = icmp sgt i64 %13, %44
  br i1 %46, label %47, label %20, !prof !33

; <label>:47:                                     ; preds = %43
  br label %52

; <label>:48:                                     ; preds = %52
  br label %53

; <label>:49:                                     ; preds = %53
  br label %54

; <label>:50:                                     ; preds = %54
  br label %55

; <label>:51:                                     ; preds = %55
  br label %56

; <label>:52:                                     ; preds = %47, %65
  br label %48

; <label>:53:                                     ; preds = %48, %64
  br label %49

; <label>:54:                                     ; preds = %63, %49
  br label %50

; <label>:55:                                     ; preds = %62, %50
  br label %51

; <label>:56:                                     ; preds = %51, %61
  br label %42

; <label>:57:                                     ; preds = %42, %60
  br label %21

; <label>:58:                                     ; preds = %59, %21
  br label %22
                                                  ; No predecessors!
  br label %58
                                                  ; No predecessors!
  br label %57
                                                  ; No predecessors!
  br label %56
                                                  ; No predecessors!
  br label %55
                                                  ; No predecessors!
  br label %54
                                                  ; No predecessors!
  br label %53
                                                  ; No predecessors!
  br label %52
}

DSWP:  Link pipeline stages
DSWP: Exit
Parallelizer:  Link the parallelize loop
Final printout:

; Function Attrs: inlinehint noinline norecurse uwtable
define i32 @main(i32, i8**) #0 !prof !29 {
  %3 = alloca [144 x i64]
  %4 = bitcast [144 x i64]* %3 to i8*
  %5 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 0
  %6 = bitcast i64* %5 to i32*
  %7 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 8
  %8 = bitcast i64* %7 to i32*
  %9 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 16
  %10 = bitcast i64* %9 to i32*
  %11 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 24
  %12 = bitcast i64* %11 to i32*
  %13 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 32
  %14 = bitcast i64* %13 to i32*
  %15 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 40
  %16 = bitcast i64* %15 to i32*
  %17 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 48
  %18 = bitcast i64* %17 to [8 x i64]**
  %19 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 56
  %20 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 64
  %21 = bitcast i64* %20 to i32*
  %22 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 72
  %23 = bitcast i64* %22 to i32*
  %24 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 80
  %25 = bitcast i64* %24 to i32*
  %26 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 88
  %27 = bitcast i64* %26 to i32*
  %28 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 96
  %29 = bitcast i64* %28 to i32*
  %30 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 104
  %31 = bitcast i64* %30 to i32*
  %32 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 112
  %33 = bitcast i64* %32 to i32*
  %34 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 120
  %35 = bitcast i64* %34 to i32*
  %36 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 128
  %37 = bitcast i64* %36 to i32*
  %38 = getelementptr inbounds [144 x i64], [144 x i64]* %3, i64 0, i64 136
  %39 = bitcast i64* %38 to i32*
  %40 = alloca [8 x i64], align 16
  %41 = icmp slt i32 %0, 10
  br i1 %41, label %42, label %52, !prof !30

; <label>:42:                                     ; preds = %2
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %44 = load i8*, i8** %1, align 8
  %45 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i8* %44) #21
  br label %46

; <label>:46:                                     ; preds = %48, %42
  %.03 = phi i32 [ 0, %42 ], [ %50, %48 ]
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %exitcond = icmp eq i32 %.03, 8
  br i1 %exitcond, label %51, label %48

; <label>:48:                                     ; preds = %46
  %49 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i32 %.03) #21
  %50 = add nuw nsw i32 %.03, 1
  br label %46

; <label>:51:                                     ; preds = %46
  %.lcssa = phi %struct._IO_FILE* [ %47, %46 ]
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %.lcssa) #21
  br label %154

; <label>:52:                                     ; preds = %2
  %53 = getelementptr inbounds i8*, i8** %1, i64 1
  %54 = load i8*, i8** %53, align 8
  %55 = tail call i64 @atoll(i8* %54) #22
  br label %56

; <label>:56:                                     ; preds = %57, %52
  %indvars.iv43 = phi i64 [ %indvars.iv.next44, %57 ], [ 0, %52 ]
  %exitcond45 = icmp eq i64 %indvars.iv43, 8
  br i1 %exitcond45, label %63, label %57, !prof !31

; <label>:57:                                     ; preds = %56
  %58 = add nuw nsw i64 %indvars.iv43, 2
  %59 = getelementptr inbounds i8*, i8** %1, i64 %58
  %60 = load i8*, i8** %59, align 8
  %61 = tail call i64 @atoll(i8* %60) #22
  %62 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 %indvars.iv43
  store i64 %61, i64* %62, align 8
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  br label %56

; <label>:63:                                     ; preds = %56
  %64 = mul nsw i32 %0, 5
  %65 = sdiv i32 %64, 2
  %66 = add nsw i32 %65, 1
  %67 = mul nsw i32 %0, 21
  %68 = add nsw i32 %67, 1
  %69 = mul nsw i32 %0, 71
  %70 = add nsw i32 %69, 1
  %71 = mul nsw i32 %0, 3
  %72 = sdiv i32 %71, 2
  %73 = add nsw i32 %72, 1
  %74 = mul nsw i32 %0, 17
  %75 = sdiv i32 %74, 2
  %76 = add nsw i32 %75, 1
  %77 = mul nsw i32 %0, 11
  %78 = sdiv i32 %77, 2
  %79 = add nsw i32 %78, 1
  %80 = mul nsw i32 %0, 21
  %81 = sdiv i32 %80, 2
  %82 = add nsw i32 %81, 1
  %83 = load i32, i32* @0
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %155, label %85

; <label>:85:                                     ; preds = %63, %151
  %indvars.iv41 = phi i64 [ %indvars.iv.next42, %151 ], [ 0, %63 ]
  %.019 = phi i32 [ %.120.lcssa, %151 ], [ %82, %63 ]
  %.017 = phi i32 [ %.118.lcssa, %151 ], [ %79, %63 ]
  %.015 = phi i32 [ %.116.lcssa, %151 ], [ %76, %63 ]
  %.013 = phi i32 [ %.114.lcssa, %151 ], [ %73, %63 ]
  %.011 = phi i32 [ %.112.lcssa, %151 ], [ %70, %63 ]
  %.09 = phi i32 [ %.110.lcssa, %151 ], [ %68, %63 ]
  %.07 = phi i32 [ %.18.lcssa, %151 ], [ %66, %63 ]
  %.06 = phi i32 [ %.1.lcssa, %151 ], [ %0, %63 ]
  %86 = icmp sgt i64 %55, %indvars.iv41
  br i1 %86, label %87, label %152, !prof !32

; <label>:87:                                     ; preds = %85
  br label %88

; <label>:88:                                     ; preds = %92, %87
  %indvars.iv = phi i64 [ %indvars.iv.next, %92 ], [ 0, %87 ]
  %.1 = phi i32 [ %94, %92 ], [ %.06, %87 ]
  %89 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 0
  %90 = load i64, i64* %89, align 16
  %91 = icmp sgt i64 %90, %indvars.iv
  br i1 %91, label %92, label %95, !prof !33

; <label>:92:                                     ; preds = %88
  %93 = mul nsw i32 %.1, 3
  %94 = sdiv i32 %93, 2
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  br label %88

; <label>:95:                                     ; preds = %88
  %.1.lcssa = phi i32 [ %.1, %88 ]
  br label %96

; <label>:96:                                     ; preds = %100, %95
  %indvars.iv27 = phi i64 [ %indvars.iv.next28, %100 ], [ 0, %95 ]
  %.18 = phi i32 [ %102, %100 ], [ %.07, %95 ]
  %97 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 1
  %98 = load i64, i64* %97, align 8
  %99 = icmp sgt i64 %98, %indvars.iv27
  br i1 %99, label %100, label %103, !prof !33

; <label>:100:                                    ; preds = %96
  %101 = mul nsw i32 %.18, %.1.lcssa
  %102 = sdiv i32 %101, 2
  %indvars.iv.next28 = add nuw i64 %indvars.iv27, 1
  br label %96

; <label>:103:                                    ; preds = %96
  %.18.lcssa = phi i32 [ %.18, %96 ]
  br label %104

; <label>:104:                                    ; preds = %108, %103
  %indvars.iv29 = phi i64 [ %indvars.iv.next30, %108 ], [ 0, %103 ]
  %.110 = phi i32 [ %110, %108 ], [ %.09, %103 ]
  %105 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 2
  %106 = load i64, i64* %105, align 16
  %107 = icmp sgt i64 %106, %indvars.iv29
  br i1 %107, label %108, label %111, !prof !33

; <label>:108:                                    ; preds = %104
  %109 = mul nsw i32 %.110, %.18.lcssa
  %110 = sdiv i32 %109, 2
  %indvars.iv.next30 = add nuw i64 %indvars.iv29, 1
  br label %104

; <label>:111:                                    ; preds = %104
  %.110.lcssa = phi i32 [ %.110, %104 ]
  br label %112

; <label>:112:                                    ; preds = %116, %111
  %indvars.iv31 = phi i64 [ %indvars.iv.next32, %116 ], [ 0, %111 ]
  %.112 = phi i32 [ %118, %116 ], [ %.011, %111 ]
  %113 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 3
  %114 = load i64, i64* %113, align 8
  %115 = icmp sgt i64 %114, %indvars.iv31
  br i1 %115, label %116, label %119, !prof !33

; <label>:116:                                    ; preds = %112
  %117 = mul nsw i32 %.112, %.110.lcssa
  %118 = sdiv i32 %117, 2
  %indvars.iv.next32 = add nuw i64 %indvars.iv31, 1
  br label %112

; <label>:119:                                    ; preds = %112
  %.112.lcssa = phi i32 [ %.112, %112 ]
  br label %120

; <label>:120:                                    ; preds = %124, %119
  %indvars.iv33 = phi i64 [ %indvars.iv.next34, %124 ], [ 0, %119 ]
  %.114 = phi i32 [ %126, %124 ], [ %.013, %119 ]
  %121 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 4
  %122 = load i64, i64* %121, align 16
  %123 = icmp sgt i64 %122, %indvars.iv33
  br i1 %123, label %124, label %127, !prof !33

; <label>:124:                                    ; preds = %120
  %125 = mul nsw i32 %.114, %.112.lcssa
  %126 = sdiv i32 %125, 2
  %indvars.iv.next34 = add nuw i64 %indvars.iv33, 1
  br label %120

; <label>:127:                                    ; preds = %120
  %.114.lcssa = phi i32 [ %.114, %120 ]
  br label %128

; <label>:128:                                    ; preds = %132, %127
  %indvars.iv35 = phi i64 [ %indvars.iv.next36, %132 ], [ 0, %127 ]
  %.116 = phi i32 [ %134, %132 ], [ %.015, %127 ]
  %129 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 5
  %130 = load i64, i64* %129, align 8
  %131 = icmp sgt i64 %130, %indvars.iv35
  br i1 %131, label %132, label %135, !prof !33

; <label>:132:                                    ; preds = %128
  %133 = mul nsw i32 %.116, %.114.lcssa
  %134 = sdiv i32 %133, 2
  %indvars.iv.next36 = add nuw i64 %indvars.iv35, 1
  br label %128

; <label>:135:                                    ; preds = %128
  %.116.lcssa = phi i32 [ %.116, %128 ]
  br label %136

; <label>:136:                                    ; preds = %140, %135
  %indvars.iv37 = phi i64 [ %indvars.iv.next38, %140 ], [ 0, %135 ]
  %.118 = phi i32 [ %142, %140 ], [ %.017, %135 ]
  %137 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 6
  %138 = load i64, i64* %137, align 16
  %139 = icmp sgt i64 %138, %indvars.iv37
  br i1 %139, label %140, label %143, !prof !33

; <label>:140:                                    ; preds = %136
  %141 = mul nsw i32 %.118, %.116.lcssa
  %142 = sdiv i32 %141, 2
  %indvars.iv.next38 = add nuw i64 %indvars.iv37, 1
  br label %136

; <label>:143:                                    ; preds = %136
  %.118.lcssa = phi i32 [ %.118, %136 ]
  br label %144

; <label>:144:                                    ; preds = %148, %143
  %indvars.iv39 = phi i64 [ %indvars.iv.next40, %148 ], [ 0, %143 ]
  %.120 = phi i32 [ %150, %148 ], [ %.019, %143 ]
  %145 = getelementptr inbounds [8 x i64], [8 x i64]* %40, i64 0, i64 7
  %146 = load i64, i64* %145, align 8
  %147 = icmp sgt i64 %146, %indvars.iv39
  br i1 %147, label %148, label %151, !prof !33

; <label>:148:                                    ; preds = %144
  %149 = mul nsw i32 %.120, %.118.lcssa
  %150 = sdiv i32 %149, 2
  %indvars.iv.next40 = add nuw i64 %indvars.iv39, 1
  br label %144

; <label>:151:                                    ; preds = %144
  %.120.lcssa = phi i32 [ %.120, %144 ]
  %indvars.iv.next42 = add nuw i64 %indvars.iv41, 1
  br label %85

; <label>:152:                                    ; preds = %191, %85
  %.019.lcssa = phi i32 [ %.019, %85 ], [ %185, %191 ]
  %.017.lcssa = phi i32 [ %.017, %85 ], [ %187, %191 ]
  %.015.lcssa = phi i32 [ %.015, %85 ], [ %184, %191 ]
  %.013.lcssa = phi i32 [ %.013, %85 ], [ %188, %191 ]
  %.011.lcssa = phi i32 [ %.011, %85 ], [ %183, %191 ]
  %.09.lcssa = phi i32 [ %.09, %85 ], [ %186, %191 ]
  %.07.lcssa = phi i32 [ %.07, %85 ], [ %190, %191 ]
  %.06.lcssa = phi i32 [ %.06, %85 ], [ %189, %191 ]
  %153 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i32 %.06.lcssa, i32 %.07.lcssa, i32 %.09.lcssa, i32 %.011.lcssa, i32 %.013.lcssa, i32 %.015.lcssa, i32 %.017.lcssa, i32 %.019.lcssa)
  br label %154

; <label>:154:                                    ; preds = %152, %51
  %.0 = phi i32 [ -1, %51 ], [ 0, %152 ]
  ret i32 %.0

; <label>:155:                                    ; preds = %63
  store i32 1, i32* @0
  store i32 %66, i32* %12
  store [8 x i64]* %40, [8 x i64]** %18
  store i64 %55, i64* %19
  store i32 %76, i32* %21
  store i32 %68, i32* %23
  store i32 %79, i32* %27
  store i32 %0, i32* %31
  store i32 %70, i32* %33
  store i32 %73, i32* %35
  store i32 %82, i32* %39
  %156 = alloca [8 x i8*]
  %157 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 0
  %158 = bitcast i8** %157 to void (i8*, i8*)**
  store void (i8*, i8*)* @1, void (i8*, i8*)** %158
  %159 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 1
  %160 = bitcast i8** %159 to void (i8*, i8*)**
  store void (i8*, i8*)* @2, void (i8*, i8*)** %160
  %161 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 2
  %162 = bitcast i8** %161 to void (i8*, i8*)**
  store void (i8*, i8*)* @3, void (i8*, i8*)** %162
  %163 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 3
  %164 = bitcast i8** %163 to void (i8*, i8*)**
  store void (i8*, i8*)* @4, void (i8*, i8*)** %164
  %165 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 4
  %166 = bitcast i8** %165 to void (i8*, i8*)**
  store void (i8*, i8*)* @5, void (i8*, i8*)** %166
  %167 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 5
  %168 = bitcast i8** %167 to void (i8*, i8*)**
  store void (i8*, i8*)* @6, void (i8*, i8*)** %168
  %169 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 6
  %170 = bitcast i8** %169 to void (i8*, i8*)**
  store void (i8*, i8*)* @7, void (i8*, i8*)** %170
  %171 = getelementptr inbounds [8 x i8*], [8 x i8*]* %156, i64 0, i64 7
  %172 = bitcast i8** %171 to void (i8*, i8*)**
  store void (i8*, i8*)* @8, void (i8*, i8*)** %172
  %173 = bitcast [8 x i8*]* %156 to i8*
  %174 = alloca [7 x i64]
  %175 = getelementptr inbounds [7 x i64], [7 x i64]* %174, i64 0, i64 0
  store i64 32, i64* %175
  %176 = getelementptr inbounds [7 x i64], [7 x i64]* %174, i64 0, i64 1
  store i64 32, i64* %176
  %177 = getelementptr inbounds [7 x i64], [7 x i64]* %174, i64 0, i64 2
  store i64 32, i64* %177
  %178 = getelementptr inbounds [7 x i64], [7 x i64]* %174, i64 0, i64 3
  store i64 32, i64* %178
  %179 = getelementptr inbounds [7 x i64], [7 x i64]* %174, i64 0, i64 4
  store i64 32, i64* %179
  %180 = getelementptr inbounds [7 x i64], [7 x i64]* %174, i64 0, i64 5
  store i64 32, i64* %180
  %181 = getelementptr inbounds [7 x i64], [7 x i64]* %174, i64 0, i64 6
  store i64 32, i64* %181
  %182 = bitcast [7 x i64]* %174 to i64*
  call void @stageDispatcher(i8* %4, i64* %182, i8* %173, i64 8, i64 7)
  %183 = load i32, i32* %6
  %184 = load i32, i32* %8
  %185 = load i32, i32* %10
  %186 = load i32, i32* %14
  %187 = load i32, i32* %16
  %188 = load i32, i32* %25
  %189 = load i32, i32* %29
  %190 = load i32, i32* %37
  br label %191

; <label>:191:                                    ; preds = %155
  store i32 0, i32* @0
  br label %152
}

Parallelizer: Exit
Parallelizer:  Parallelization complete
llvm-dis test_dswp_unoptimized.bc
clang++ -O3 -c -emit-llvm test_dswp_unoptimized.bc -o test_dswp.bc
llvm-dis test_dswp.bc
clang++ -std=c++14 -pthreads -O3 test_dswp.bc -lm -o parallelized
